allprojects {
    group = 'com.csf'
    version '1.0.0'

    apply plugin: 'java'
    apply plugin: 'eclipse'

	sourceCompatibility = 11
    targetCompatibility = 11

    def defaultEncoding = 'UTF-8'
    tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
    compileJava.dependsOn(processResources)

    repositories {
        mavenCentral()
        jcenter()
    }
}

buildscript {
    ext {
        springBootVersion = '2.3.3.RELEASE'
        springManagementVersion = '1.0.11.RELEASE'
        lombokVersion = '1.18.24'
        // Hoxton cloud is not compatible with Spring Boot 2.4 after.
        springCloudVersion = 'Hoxton.SR8'
        //springCloudVersion = '2021.0.3'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springManagementVersion}")
    }
}

configure(subprojects.findAll {it.name != 'csf-common'}) {

	apply plugin: 'war'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    tasks.withType(AbstractCompile).each { it.options.encoding = 'UTF-8' }
    compileJava.dependsOn(processResources)

    springBoot {
        buildInfo()
    }

    dependencies{
    	// Rebuild common in case build each project - to keep newly source code are updated.
    	implementation project(':csf-common')
    	implementation 'org.springframework.boot:spring-boot-starter-web'
        // implementation 'org.springframework.boot:spring-boot-devtools'

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

subprojects {
	apply plugin: 'java'

    sourceCompatibility = 11
	targetCompatibility = 11

	compileJava.options.encoding = 'UTF-8'
	tasks.withType(JavaCompile) {
	    options.encoding = 'UTF-8'
	}

	repositories {
    	mavenCentral()
    	jcenter()
		maven { url 'https://repo.spring.io/milestone' }
	}

  	dependencies{
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
    }
}

project(':csf-common') {
}

project(':csf-security') {
	archivesBaseName = 'security'
	dependencies {

	    implementation 'org.springframework.boot:spring-boot-starter'
	    //implementation 'org.springframework.boot:spring-boot-starter-security'
	
	    // Move config.
	    implementation 'org.springframework.boot:spring-boot-starter-validation'
	    implementation 'org.springframework.boot:spring-boot-configuration-processor'
	    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
	    implementation 'org.springframework.cloud:spring-cloud-starter-config'
	    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	    implementation 'org.springframework.boot:spring-boot-starter-web'
	    implementation 'mysql:mysql-connector-java';
	
	    // Swagger 2.
	    implementation "io.springfox:springfox-swagger2:2.9.2"
	    implementation "io.springfox:springfox-swagger-ui:2.9.2"
	}
}

project(':csf-zuul') {

	archivesBaseName = 'zuul'
	configurations {
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
	}
	dependencies {
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
		implementation 'org.springframework.cloud:spring-cloud-starter-config'
	}
}

project(':csf-account') {
	archivesBaseName = 'account'

	dependencies {
	    //implementation 'org.springframework.boot:spring-boot-starter-security'
	    implementation 'org.springframework.boot:spring-boot-starter-web'
	    implementation 'org.springframework.cloud:spring-cloud-starter-config'
	    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
	    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	    //implementation 'org.liquibase:liquibase-core'

	    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	    implementation 'org.springframework.kafka:spring-kafka'
	    implementation 'mysql:mysql-connector-java';
	}
}

project(':csf-cdn') {
	archivesBaseName = 'cdn'

	dependencies {
	    implementation 'org.springframework.boot:spring-boot-starter-web'
	    implementation 'org.springframework.cloud:spring-cloud-starter-config'
	    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
	    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	    implementation 'org.springframework.kafka:spring-kafka'
	}
}

project(':csf-base') {

	archivesBaseName = 'base'
	apply plugin: 'java-library'

	dependencies {
	    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}"
	    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonCoreVersion}"
	    implementation "javassist:javassist:${javassistVersion}"
	    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}"
	
	    implementation "org.springframework:spring-webmvc"
	    implementation "org.springframework:spring-web:${springWeb}"
	    compileOnly    "javax.servlet:javax.servlet-api:${javaxServlet}"
	    implementation "org.springframework.security:spring-security-acl:${springSecurityAcl}"
	    implementation "javax.ws.rs:javax.ws.rs-api:${javaxWS}"
	
	    implementation "commons-fileupload:commons-fileupload:${commonsFileupload}"
	    implementation "commons-beanutils:commons-beanutils:${commonsBeanutils}"
	    implementation "commons-io:commons-io:${commonsIO}"

	    // Swagger 2.
	    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
	    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
	}
}

project(':csf-whoami') {
	apply plugin: 'war'
	archivesBaseName = 'whoami'

	dependencies {
	    implementation project(":csf-base")
	    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
	    implementation "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
	    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
		// Security config
	    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"

	    implementation "mysql:mysql-connector-java:${mysqlConnector}"
	    implementation "io.jsonwebtoken:jjwt:${jsonwebtoken}"
	
	    // For thymeleaf
	    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
	
	    // https://mvnrepository.com/artifact/javax.mail/mail
	    implementation "javax.mail:mail:${javaxMail}"
	    // https://mvnrepository.com/artifact/org.apache.poi/poi
	    implementation "org.apache.poi:poi:${apachePoi}"
	
	    // https://mvnrepository.com/artifact/net.coobird/thumbnailator
	    implementation "net.coobird:thumbnailator:${coobird}"
	
	    implementation "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
	    implementation "commons-collections:commons-collections:${commonsCollection}"
	    implementation "org.apache.sanselan:sanselan:${sanselan}"

		implementation "org.apache.directory.studio:org.apache.commons.io:${directoryStudio}"
		implementation "org.apache.commons:commons-lang3:${commonsLang3}"
	}
}